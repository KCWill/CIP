{"version":3,"sources":["components/Welcome/Welcome.js","components/Overview/Overview.js","apiCalls.js","components/Instructions/Instructions.js","RestaurantData.js","components/RestaurantDetails/RestaurantDetails.js","components/LineChooser/LineChooser.js","components/SavedStations/SavedStations.js","components/App/App.js","index.js"],"names":["Welcome","className","Overview","to","fetchLines","a","fetch","response","ok","console","log","status","Error","json","metroLines","message","fetchStations","lineId","stations","fetchDirections","directionId","fetchNextArrivals","stationId","nextArrivals","Instructions","props","nextTrainsArriving","displayNextTimes","state","map","time","index","key","saveStation","addSavedStation","station","name","restaurantId","setState","favorited","removeStation","removeSavedStation","checkAlreadySaved","favoritedTF","favorites","filter","favorite","length","componentDidMount","stationsOnLine","id","lines","line","shortName","lineShortName","this","displayRestaurantName","type","onClick","Component","restaurantData","stGermain","address","imageURL","description","nearbyLines","metroURL","beaugrenelle","montmartre","RestaurantDetails","alt","src","LineChooser","getAvailableLines","exact","getStationsOnLine","getMetroDirection","directions","direction","way","displayLineShortName","displayStationName","SavedStations","savedStations","stationName","App","newFavorite","updatedSavedStations","activeClassName","path","component","render","match","params","window","location","pathname","router","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.01ca3078.chunk.js","sourcesContent":["import React from 'react'; \nimport './Welcome.css';\n\nconst Welcome = () => {\n  return (\n    <section className='welcome-page'>\n      <h2>Bienvenue !</h2>\n      <p className='welcome-message'>\n        Welcome to le Chipôtlé, the premier stop for Americans living in Paris! This site was created by a Coloradan who grew up eating Chipotle every chance he got. While he was working in Paris, he became a bit homesick and ventured to the Chipotle in Montmartre. The industrial décor, the line of ingredients protected by glass, the friendly staff, and even the Tabasco Chipotle Pepper Sauce was all there. This mini Coloradan Embassy was the answer to his homesick feeling. \n      </p>\n      <p className='welcome-message'>\n        Use this website to find out about the three Chipotles in Paris. Each is unique and have some important differences (really!). View the locations' details and get directions using the Paris Métro. \n      </p>\n      <p className='welcome-message'>\n        Click 'Locations' in the navigation bar to view the Chipotles in Paris!\n      </p>\n    </section>\n  )\n}\n\nexport default Welcome;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Overview.css'\n\n\nconst Overview = () => { \n    return(\n    <section>\n      <h2>\n        Chipotles in Paris\n      </h2>\n      <section className='restaurants-container'>\n        <section className='restaurant-overview'>\n          <h3>\n            Montmartre\n          </h3>\n          <p>\n            Located in the art district of Paris, Chipotle Montmartre is surrounded by many other American fast-food chains. \n          </p>\n        <NavLink to='/details/montmartre' className='details-btn'>\n          View Details\n        </NavLink>\n        </section>\n        <section className='restaurant-overview'>\n          <h3>\n            Beaugrenelle\n          </h3>\n          <p>\n            Directly on the Seine, this Chipotle in the Beaugrenelle Mall is a short walk from the Eiffel Tower and has a special secret.\n          </p>\n          <NavLink to='/details/beaugrenelle' className='details-btn'>\n            View Details\n          </NavLink>\n        </section>\n        <section className='restaurant-overview'>\n          <h3>\n            St. Germain\n          </h3>\n          <p>\n            A few blocks from Notre-Dame de Paris and le Jardin du Luxembourg, kick back and eat a burrito with guac. You can afford the extra €s in St. Germain! \n          </p>\n          <NavLink to='/details/stGermain' className='details-btn'>\n            View Details\n          </NavLink>\n        </section>\n      </section>\n    </section>\n    )\n}\n\nexport default Overview;","export const fetchLines = async () => {\n  try {\n    const response = await fetch('http://restratpws.azurewebsites.net/api/lines/metro');\n    if(!response.ok) {\n      console.log(response.status);\n      throw new Error('The métro system is down at this time.')\n    }\n    const metroLines = await response.json();\n    return metroLines\n  }\n  catch (e) {\n    console.log(e.message);\n  }\n};\n\nexport const fetchStations = async (lineId) => {\n  try {\n    const response = await fetch(`http://restratpws.azurewebsites.net/api/stations/${lineId}`);\n    if(!response.ok) {\n      console.log(response.status);\n      throw new Error('The métro system is down at this time.')\n    }\n    const stations = await response.json();\n    return stations\n  }\n  catch (e) {\n    console.log(e.message);\n  }\n};\n\nexport const fetchDirections = async (directionId) => {\n  try {\n    const response = await fetch(`http://restratpws.azurewebsites.net/api/directions/${directionId}`);\n    if(!response.ok){\n      console.log(response.status);\n      throw new Error('The métro system is down at this time.')\n    }\n    const stations = await response.json();\n    return stations\n  }\n  catch (e) {\n    console.log(e.message);\n  }\n}\n\nexport const fetchNextArrivals = async (lineId, stationId, directionId) => {\n  try {\n    const response = await fetch(`http://restratpws.azurewebsites.net/api/Missions/${lineId}/from/${stationId}/way/${directionId}`);\n    if(!response.ok){\n      console.log(response.status);\n      throw new Error('The métro system is down at this time.')\n    }\n    const nextArrivals = await response.json();\n    return nextArrivals\n  }\n  catch (e) {\n    console.log(e.message);\n  }\n}\n","import React, { Component } from 'react';\nimport { fetchNextArrivals, fetchStations, fetchLines } from '../../apiCalls.js';\nimport './Instructions.css';\nimport PropTypes from 'prop-types';\n\nclass Instructions extends Component { \n  constructor(props){\n    super(props);\n    this.state = {\n      nextArrivals: [],\n      station: [],\n      favorited: false,\n      lineShortName: '',\n    }\n  }\n\n  nextTrainsArriving = () => {\n    const displayNextTimes = this.state.nextArrivals.map((time, index) => {\n      return (\n      <li key={index}>\n        {`-${time}`}\n      </li>\n      )\n    })\n    return (\n      <ul>\n        {displayNextTimes}\n      </ul>\n    )\n  }\n  saveStation = () => {\n    this.props.addSavedStation(this.props.lineId, this.state.station[0].name, this.props.stationId, this.props.directionId, this.props.restaurantId)\n    this.setState({...this.state, favorited: true})\n  }\n\n  removeStation = () => {\n    this.props.removeSavedStation(this.props.stationId);\n    this.setState({...this.state, favorited: false})\n  }\n  checkAlreadySaved = () => {\n    const previousFavoritedStation = this.props.favorites.filter((favorite) => {\n      return ((this.props.stationId === favorite.stationId) && (this.props.restaurantId === favorite.restaurantId))\n    })\n    const favoritedTF = !!previousFavoritedStation.length;\n    this.setState({...this.state, favorited:favoritedTF})\n  }\n\n\n  componentDidMount = async () => {\n    const nextArrivals = await fetchNextArrivals(this.props.lineId, this.props.stationId, this.props.directionId);\n    const stationsOnLine = await fetchStations(this.props.lineId);\n    const station = stationsOnLine.filter((station) => station.id === this.props.stationId)\n    const lines = await fetchLines();\n    const lineShortName = await lines.filter((line) => {\n      return line.id === this.props.lineId\n    })[0].shortName;\n    \n    this.checkAlreadySaved()\n    this.setState({...this.state, nextArrivals, station, lineShortName})\n  }\n\n  render() {\n    return(\n    <section className='next-trains'>\n      <h2>Upcoming Trains - Chipotle {this.props.displayRestaurantName(this.props.restaurantId)}</h2>\n      {this.state.station.length === 1 && <p>{`Arriving at ${this.state.station[0].name} on ${this.state.lineShortName} in...`}</p>}\n      {this.state.station.length === 1 && this.nextTrainsArriving()}\n      {!this.state.favorited && <button type='submit' className='favorite-btn' onClick={this.saveStation}>Favorite This Station</button>}\n      {this.state.favorited && <button type='submit' className='favorite-btn' onClick={this.removeStation}>Remove Station from Favorites</button>}\n      {!this.state.nextArrivals.length && <h3>Loading...</h3>}\n    </section>\n    )\n  }\n}\n\nexport default Instructions;\n\nInstructions.propTypes = {\n  restaurantId: PropTypes.string,\n  lineId: PropTypes.string,\n  stationId: PropTypes.string,\n  directionId: PropTypes.string,\n  addSavedStation: PropTypes.func,\n  removeSavedStation: PropTypes.func,\n  displayRestaurantName: PropTypes.func,\n  favorites: PropTypes.arrayOf(PropTypes.object)\n}","const restaurantData = {\n  stGermain: {\n    name: 'St. Germain',\n    address: '96 Boulevard Saint-Germain, 75005 Paris, France',\n    imageURL: `/images/stGermain1.png`,\n    description: `St. Germain's Chipotle is located just three blocks from Notre-Dame de Paris. Le Jardin du Luxembourg is just three blocks away in the other direction. This location is the smallest of the three. 3.5 out of 5 stars.`,\n    nearbyLines: [],\n    metroURL: '/images/stGermainMetro.png'\n  },\n  beaugrenelle: {\n    name: 'Beaugrenelle',\n    address: '2 Rue Linois, 75015 Paris, France',\n    imageURL: `/images/beaugrenelle2.jpg`,\n    description: `This Chipotle is located in the Beaugrenelle Mall and is hands-down the best Chipotle in Paris. It has something absolutely unheard of in France: A SODA FOUNTAIN. Yes, this Chipotle gives you a soda cup that you can refill to your heart's desire. No lukewarm cans of soda! Fill that cup to the BRIM with ice! AMERICA. The dining room is also the biggest of all other locations and has a beautiful view onto the Seine river right outside. Oh, it's also a ten minute walk from the Eiffel Tower. Try walking outside to the middle of the Grenelle bridge, there you can descend steps and walk on the Île aux Cygnes (Island of Swans) towards the Eiffel tower. It's an island in the middle of the Seine lined with trees; it's truly a magical experience and I did it every single Saturday. Go here if at all possible!  5 out of 5 stars.`,\n    nearbyLines: [],\n    metroURL: '/images/beaugrenelleMetro.png'\n  },\n  montmartre: {\n    name: 'Montmartre',\n    address: '18-20 Boulevard Montmartre, 75009 Paris, France',\n    imageURL: `/images/montmartre1.png`,\n    description: `This was the first Chipotle I went to in Paris. It's located in an area of Paris that is known for its art and homeplace of Amélie! It's just a few blocks from Palais Garnier (Fantom of the Opera, anyone?). There are quite a few American fast-food chains around this location and it kind of takes you out of the Parisian experience. When I went it was the middle of June and I was thirsty, so I got two cans of Coca Light (Diet Coke). No regrets there. This location has two floors with a dining room on the second floor. 4 out of 5 stars.`,\n    nearbyLines: [],\n    metroURL: '/images/montmartreMetro.png'\n  }\n}\n\nexport default restaurantData;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './RestaurantDetails.css';\nimport restaurantData from '../../RestaurantData.js';\nimport PropTypes from 'prop-types';\n\nconst RestaurantDetails = (props) => {\n  const chooseRestaurant = () => {\n    return (\n      <section className='restaurant-container'>\n        <section className='images'>\n          <img alt={`${restaurantData[props.restaurantId].name} view`} src={restaurantData[props.restaurantId].imageURL} />\n        </section>\n        <section className='details'>\n          <h2>\n            {`Chipotle ${restaurantData[props.restaurantId].name}`}\n          </h2>\n          <p>\n            {restaurantData[props.restaurantId].description}\n          </p>\n          <p>\n            {restaurantData[props.restaurantId].address}\n          </p>\n          <NavLink to={`/navigate/${props.restaurantId}`} className='navigate-btn'>\n            Find the Next Train to this Location! \n          </NavLink>\n        </section>\n      </section>\n    )\n  }\n\n  return(\n    <section>\n      {chooseRestaurant()}\n    </section>\n  )\n}\n\nexport default RestaurantDetails;\n\nRestaurantDetails.propTypes = {\n  restaurantId: PropTypes.string,\n}","import React, { Component} from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { fetchLines, fetchStations, fetchDirections } from '../../apiCalls';\nimport './LineChooser.css';\nimport restaurantData from '../../RestaurantData.js';\nimport PropTypes from 'prop-types';\n\n\nclass LineChooser extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      lines: [],\n      stations: [],\n      directions: [],\n    };\n  }\n\n  getAvailableLines = () => {\n    const linesToDisplay = this.state.lines.map((line, index) => {\n            return <NavLink className='station-btn' key={index} exact to={`/navigate/${this.props.restaurantId}/${line.id}`}>{`${line.shortName} - ${line.name} `}</NavLink>;\n          })\n    return linesToDisplay\n  }\n\n  getStationsOnLine = () => {\n    const stationsOnLine = this.state.stations.map((station, index) => {\n      return <NavLink className='station-btn' key={index} to={`/navigate/${this.props.restaurantId}/${this.props.lineId}/${station.id}`}>{station.name}</NavLink>;\n    })\n    return stationsOnLine\n  }\n\n  getMetroDirection = () => {\n    const trainDirection = this.state.directions.map((direction, index)=>{\n    return <NavLink className='station-btn' key={index} to={`/navigate/${this.props.restaurantId}/${this.props.lineId}/${this.props.stationId}/${direction.way}`}>{`Going towards ${direction.name}`}</NavLink>\n    })\n    return trainDirection\n  }\n\n  displayLineShortName = (lineId) => {\n    const lineName = this.state.lines.filter((line) => {\n      return line.id === lineId\n    })\n    return lineName[0].shortName\n  }\n\n  displayStationName = (stationId) => {\n    const stationName = this.state.stations.filter((station) => {\n      return station.id === stationId\n    })\n    return stationName[0].name\n  }\n\n  componentDidMount = async () => {\n    const lines = await fetchLines();\n    const stations = await fetchStations(this.props.lineId);\n    const directions = await fetchDirections(this.props.lineId);\n    this.setState({...this.state, lines, stations, directions})\n  }\n\n\n  render() {\n    return(\n      <section>\n        <h2>Métro Station Selector</h2>\n        <h3>\n          {restaurantData[this.props.restaurantId].name}\n        </h3>\n        <p className='directions'>\n          Use the map below to find a station near the Chipotle marked with a red star. Select a numbered line that goes from your location to a station near the Chipotle. Do not choose a line that is labeled as a single letter, as it is a RER train which has different tickets. Select a station near your location. Finally, choose the direction by looking at the final station on the given line. (e.g. To go to Bir-Hakeim from Raspail, click line M6, select Raspail, and finally select 'Going towards Charles de Gaule Etoile.')\n        </p>\n        <section className='line-selector-container'>\n          <img alt='Paris Metro Map' className='metro-graphic' src={restaurantData[this.props.restaurantId].metroURL} />\n          {!this.state.lines.length && <h2>Loading...</h2>}\n          <section className='line-selector'>\n            <section className='chooser-column'>\n              <h3>\n                Métro Lines\n              </h3>\n              {this.state.lines && this.getAvailableLines()}\n            </section>\n            <section className='chooser-column'>\n              {this.props.lineId && !!this.state.lines.length && <h3>{`Stations on Line ${this.displayLineShortName(this.props.lineId)}`}</h3>}\n              {this.props.lineId && this.getStationsOnLine()}\n            </section>\n            <section className='chooser-column'>\n              {this.props.stationId && !!this.state.directions.length && <h3>{`Choose Direction Leaving from ${this.displayStationName(this.props.stationId)}`}</h3>}\n              {this.props.stationId && this.getMetroDirection()}\n            </section>\n          </section>\n        </section>\n      </section>\n    )\n  }\n}\nexport default LineChooser;\n\nLineChooser.propTypes = {\n  restaurantId: PropTypes.string,\n  lineId: PropTypes.string,\n  stationId: PropTypes.string,\n}","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './SavedStations.css';\nimport PropTypes from 'prop-types';\n\nconst SavedStations = (props) => {\n  const displayFavorites = (savedStations) => {\n    const displayStations = savedStations.map((station, index) => { \n      return (\n        <li className='list-stations' key={index}>\n          <NavLink className='station-btn' to={`/navigate/${station.restaurantId}/${station.lineId}/${station.stationId}/${station.directionId}`}>\n            {`${station.stationName} - Going to Chipotle ${props.displayRestaurantName(station.restaurantId)}`} \n          </NavLink>\n        </li>\n      )\n    })\n    return displayStations\n  }\n\n  return(\n    <section>\n      <h2>Your Saved Trips</h2>\n      <ul>\n        {displayFavorites(props.savedStations)}\n      </ul>\n      {!props.savedStations.length && <h3>Add some stations!</h3>}\n    </section>\n  )\n}\n\nexport default SavedStations;\n\nSavedStations.propTypes = {\n  savedStations: PropTypes.arrayOf(PropTypes.object),\n  displayRestaurantName: PropTypes.func,\n}","import React, { Component } from 'react';\nimport { Route, NavLink, BrowserRouter } from 'react-router-dom';\nimport Welcome from '../Welcome/Welcome.js';\nimport Overview from '../Overview/Overview.js';\nimport Instructions from '../Instructions/Instructions.js';\nimport RestaurantDetails from '../RestaurantDetails/RestaurantDetails.js';\nimport LineChooser from '../LineChooser/LineChooser.js';\nimport SavedStations from '../SavedStations/SavedStations.js';\nimport './App.css';\nimport restaurantData from '../../RestaurantData.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      favorites: [],\n      }\n  }\n\n  addSavedStation = (lineId, stationName, stationId, directionId, restaurantId) => {\n    const newFavorite = {\n      lineId,\n      stationName,\n      stationId,\n      directionId,\n      restaurantId\n    }\n    this.setState({ favorites: [...this.state.favorites, newFavorite] })\n  }\n\n  removeSavedStation = (stationId) => {\n    const updatedSavedStations = this.state.favorites.filter((station) => {\n      return station.stationId !== stationId });\n            \n    this.setState({favorites: [...updatedSavedStations]});\n  }\n\n  displayRestaurantName = (restaurantId) => {\n    return restaurantData[restaurantId].name\n  }\n\n  render () {\n    return (\n      <main className='app'>\n        <header className='top-bar'>\n          <h1>le Chipôtlé</h1>\n          <hr />\n            <section className='nav-container'>\n            <NavLink exact to='/' className='nav-btn' activeClassName='nav-btn-active'>\n              Home\n            </NavLink>\n            | \n            <NavLink to='/overview' className='nav-btn' activeClassName='nav-btn-active'>\n              Locations\n            </NavLink>\n            | \n            <NavLink to='/savedstations' className='nav-btn' activeClassName='nav-btn-active'>\n              Saved Trips\n            </NavLink>\n            </section>\n        </header>\n        <section className='main-content'>\n        <Route exact path='/' component={Welcome} />\n        <Route path='/overview' component={Overview} />\n        <Route path='/details/:restaurantId' render={({ match }) => {\n          const { restaurantId } = match.params;\n          return <RestaurantDetails restaurantId={restaurantId}/>\n        }} />\n        <Route exact path='/navigate/:restaurantId' render={({ match }) => {\n          const { restaurantId } = match.params;\n          return <LineChooser \n          restaurantId={restaurantId} \n          />\n        }}/>\n        <Route exact path='/navigate/:restaurantId/:lineId' render={({ match }) => {\n          const { restaurantId, lineId} = match.params;\n          return <LineChooser \n          key={window.location.pathname} \n          restaurantId={restaurantId} \n          lineId={lineId}/>\n        }}/>\n        <Route exact path='/navigate/:restaurantId/:lineId/:stationId' render={({ match }) => {\n          const { restaurantId, lineId, stationId} = match.params;\n          return <LineChooser \n          key={window.location.pathname} \n          restaurantId={restaurantId} \n          lineId={lineId} \n          stationId={stationId}/>\n        }}/>\n        <Route \n          exact path='/navigate/:restaurantId/:lineId/:stationId/:directionId'\n          render={({ match }) => {\n            const { restaurantId, lineId, stationId, directionId} = match.params;\n            return <Instructions \n            restaurantId={restaurantId} \n            lineId={lineId} \n            key={window.location.pathname} \n            stationId={stationId} \n            directionId={directionId} \n            addSavedStation={this.addSavedStation}\n            removeSavedStation={this.removeSavedStation}\n            displayRestaurantName={this.displayRestaurantName}\n            favorites={this.state.favorites}\n            />\n          }}/>\n        <Route \n          exact path='/savedstations' \n          render={()=><SavedStations\n            savedStations={this.state.favorites}\n            displayRestaurantName={this.displayRestaurantName}\n          />}\n        />\n        </section>\n      </main>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nconst router = (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(router, document.getElementById('root'));\n"],"sourceRoot":""}